/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Datos.Campos;
import Datos.EliminadorTabla;
import Logica.GestorArchivo;
import static Logica.GestorArchivo.LongitudesCampos;
import Logica.GestorRegistro;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Estudiantes
 */
public class Principal extends javax.swing.JFrame {

    private String nombreTabla;
    private String campos;
    private ListSelectionListener lslBoton;
    private ArrayList<String> hist= new ArrayList();
    
    
    /**
     * Creates new form Principal
     */
    public Principal() throws IOException {      
        initComponents();
        generarTabla();
        
        setLocationRelativeTo(null);
        bMostrar.setEnabled(false);
    }
    public void historial(){
        String aux="";
        for(int i =0 ; i<hist.size() ; i++){
            aux=aux+hist.get(i);
        }
        txtHistorial.setText(aux);
    }

    public void generarTabla() throws FileNotFoundException, IOException {
        DefaultTableModel modelo = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        Object[] tabla = new Object[3];
        tabla[0] = "Nombre";
        tabla[1] = "NÃºmero de Registros";
        tabla[2] = "Campos";
        
        modelo.setColumnIdentifiers(tabla);
        
        List<Object[]> listaTablas = GestorArchivo.crearSalida();
        
        if(listaTablas==null || listaTablas.isEmpty()){
            this.tSalida.setModel(modelo);
            return;
        }
        
        for (int i=0; i<listaTablas.size(); i++) {
            modelo.addRow(listaTablas.get(i));
        }
        
        this.tSalida.getSelectionModel().removeListSelectionListener(lslBoton);
        this.tSalida.setModel(modelo);
        
        this.lslBoton = new ListSelectionListener(){
                @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    nombreTabla = (String) tSalida.getModel().getValueAt(
                            tSalida.getSelectedRow(), 0);
                    campos = (String) tSalida.getModel().getValueAt(
                            tSalida.getSelectedRow(), 2);
                    bMostrar.setEnabled(true);
                }
            }
            };
        
        this.tSalida.getSelectionModel().addListSelectionListener(lslBoton);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtEntrada = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btEjecutar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tSalida = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHistorial = new javax.swing.JTextArea();
        bMostrar = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);

        txtEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEntradaActionPerformed(evt);
            }
        });

        jLabel1.setText("Historial:");

        jLabel2.setText("Salida:");

        btEjecutar.setText("Ejecutar");
        btEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEjecutarActionPerformed(evt);
            }
        });

        tSalida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Numero Registros", "Campos"
            }
        ));
        jScrollPane3.setViewportView(tSalida);

        jScrollPane4.setViewportView(jScrollPane3);

        txtHistorial.setColumns(20);
        txtHistorial.setRows(5);
        jScrollPane1.setViewportView(txtHistorial);

        jScrollPane5.setViewportView(jScrollPane1);

        bMostrar.setText("Mostrear Campos");
        bMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMostrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btEjecutar))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bMostrar)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
                                .addComponent(jScrollPane5)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btEjecutar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bMostrar)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEntradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEntradaActionPerformed

    private void btEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEjecutarActionPerformed
        String comando = txtEntrada.getText();
        
        try {
            if ( comando.contains("ELIMINAR TABLA") ) {

                if ( EliminadorTabla.eliminarTablaArchivo((String) comando.subSequence(15, comando.length())) ) {
                    //txtHistorial.append("Se ha eliminado la tabla "+(String) comando.subSequence(15, comando.length())+"\n");
                    hist.add("Se ha eliminado la tabla "+(String) comando.subSequence(15, comando.length())+"\n");
                    generarTabla();
                } else {
                    JOptionPane.showMessageDialog(null, "No se ha eliminado el archivo");
                }

            } else if ( comando.contains("CREAR TABLA") ) {

                if ( !comando.contains(" CAMPOS ") || comando.length() <= (comando.indexOf(" CAMPOS ") + " CAMPOS ".length()) )
                    JOptionPane.showMessageDialog(null, "No se ha especificado los campos");
                else {
                    
                    if ( GestorArchivo.crearTabla((String) comando.subSequence(12, comando.length())) ) {
                        JOptionPane.showMessageDialog(null, "Ya existe una tabla con ese nombre");
                    } else {
                        //txtHistorial.append("Se ha creado la tabla " + (String) comando.subSequence(12, comando.indexOf(" CAMPOS ")) + "\n");
                        hist.add("Se ha creado la tabla " + (String) comando.subSequence(12, comando.indexOf(" CAMPOS ")) + "\n");
                    }
                    generarTabla();
                }   

            } else if ( comando.contains("MODIFICAR TABLA") ) {

                if ( !comando.contains(" CAMPO ") || !comando.contains(" POR ")|| comando.length() <= (comando.indexOf(" CAMPO ") + " CAMPO ".length()) )
                    JOptionPane.showMessageDialog(null, "No se ha especificado los campos");
                else {
                    
                    
                    String nombreTabla = (String)(comando.subSequence(16 , comando.indexOf(" CAMPO ")));
                    String campo = (String)(comando.subSequence(comando.indexOf(" CAMPO ")+nombreTabla.length()+1, comando.indexOf(" POR ")));
                    String actual = (String)(comando.subSequence(comando.lastIndexOf(" POR ")+5,comando.length()));
                    System.out.println(nombreTabla+"---"+campo+"---"+actual);
                    
                    cambiarCampos(nombreTabla,campo,actual);
                    
                    
          
                }   

            } else if ( comando.contains("CREAR REGISTRO") ) {

                if ( !comando.contains(" VALOR ") || comando.length() <= (comando.indexOf(" VALOR ") + " VALOR ".length()) )
                    JOptionPane.showMessageDialog(null, "Comando incorrecto");
                else {
                    String nombreTabla = (String)(comando.subSequence(15 , comando.indexOf(" VALOR ")));
                    String campos = (String)(comando.subSequence(comando.indexOf(" VALOR ")+7, comando.length()));
                    System.out.println(nombreTabla+"--"+campos);
                    GestorRegistro registro= new GestorRegistro();
                    registro.crearTabla(comando,nombreTabla);
          
                }   

            }
            
            

            else {
                    JOptionPane.showMessageDialog(null, "No se ha especificado la acciÃ³n(CREAR TABLA/ELIMINAR TABLA)");
            }
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }   
        
    }//GEN-LAST:event_btEjecutarActionPerformed

    private void cambiarCampos(String nomTabla, String campo, String nuevo){
        
        Iterator<Campos> iterador= LongitudesCampos.iterator();
        boolean band1 = false;
        while(iterador.hasNext()){
            if(iterador.next().getNombre().equals(nomTabla)&&iterador.next().getCamp().equals(campo)){
                band1 = true;
            }
        }
            
        
        if(band1){
            
        
            try {
                String line = null;
                String[] campos;
                RandomAccessFile file = new RandomAccessFile("archivos/" + nomTabla + ".csv", "rw");
                line = file.readLine();
                campos = line.split(",");
                int longitud = 0;
                while (longitud < campos.length) {
                    if (campos[longitud].equals(campo)) {
                        campos[longitud] = nuevo;
                        longitud++;
                    }
                    longitud++;
                }
                longitud = 0;
                file.seek(0);
                while (longitud < campos.length) {
                    if (longitud == campos.length - 1) {
                        file.write(campos[longitud].getBytes());
                        longitud++;
                    } else {
                        file.write(campos[longitud].getBytes());
                        file.write(",".getBytes());
                        longitud++;
                    }
                }
                file.close();
                line = null;
                String newLine = null;
                //String[] camposmeta;
                String aux = new String();
                int band=0;
                RandomAccessFile fileMeta = new RandomAccessFile("archivos/META_BD.csv", "rw");
                
         
         FileReader fr = new FileReader ("archivos/META_BD.csv");
         BufferedReader br = new BufferedReader(fr);

         
          line="";
          
          long pointerAnt = fileMeta.getFilePointer();
            long pointerAct;
            
            
         while((line=br.readLine())!=null){
                                     
                    
                    if (line.contains(nomTabla) && line.contains(campo)) {
                
                                newLine= line.replaceAll(campo, nuevo);
                
                        aux=aux+newLine+"\n";
                
                    }else{
                        
                        aux=aux+line+"\n";
                        
                              
                    }
                }
                fileMeta.close();
                br.close();
                fr.close();
                RandomAccessFile fileNew = new RandomAccessFile("archivos/META_BD.csv", "rw");
                fileNew.seek(0);
                fileNew.writeBytes(aux);
                fileNew.close();
                
            for (int i = 0; i < LongitudesCampos.size(); i++) {

                if (LongitudesCampos.get(i).getCamp().equals(campo) && LongitudesCampos.get(i).getNombre().equals(nomTabla)) {
                    LongitudesCampos.get(i).setCamp(nuevo);
                }
            }
            Principal pr= new Principal();
            pr.generarTabla();
            pr.setVisible(true);
            this.setVisible(false);
            JOptionPane.showMessageDialog(null, "Edicion Exitosa");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(EdicionCampo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(EdicionCampo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Tabla o Campo no registrados.");
        }
    }
    
    private void bMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMostrarActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        MostrarTabla mostrarTabla = new MostrarTabla(new javax.swing.JFrame(), true, nombreTabla);
        mostrarTabla.generarTabla(campos);
        mostrarTabla.setVisible(true);
    }//GEN-LAST:event_bMostrarActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bMostrar;
    private javax.swing.JButton btEjecutar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tSalida;
    private javax.swing.JTextField txtEntrada;
    private javax.swing.JTextArea txtHistorial;
    // End of variables declaration//GEN-END:variables
}
